@startuml "container"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")
AddElementTag("noSqlContainer", $shape=RoundedBoxShape(), $bgColor="DarkBlue", $fontColor="white")


SHOW_PERSON_OUTLINE()

title <size:40> Container Diagram
caption "the container diagram depicts the visa application system in a higher level system boundary, show casing users, external systems and the core containers of the application to give a quick overview for both technical and non-technical stakeholders"

Person(anonymousUser, Anonymous User, "An unauthorized client who has not yet gained access to the system")
Person(visaApplicant, Visa Applicant, "A user who intends to find information regarding visas and submit a visa application")
Person(visaOfficer, Visa Processor, "A AFS employee who works for a branch and supports visa applications and reviews applications before submission to third-party countries")
Person(supportSpecialist, Support Specialist, "A AFS employee who handles customer support and technical support to both customers of the system and members of staff.")
Person(branchManager, Branch Manager, "A AFS employee who has control over a local branch and the customer support working at the branch. With the ability to add visa processors")
Person(admin, Admin, "A AFS employee who has control over user privileges and data - adding more branches and branch managers to the system")

System_Ext(globalVisaDataHubSystem, "Global Visa Data Hub System", "An external system that manages visa information from various countries. Providing real-time updates and handling visa applications to relevant countries")
System_Ext(AzureMonitor, "Azure Monitor", "Will collect the logging that is done throughout the program at various steps, this will help including monitor and improve performance, reliability, scalability, and maintainability. This will also help us address non-repudiation as we will have a log of user activeites" )
System_Ext(AKS, "Azure Kubernetes Service", "Will deploy, scale and manage the frontend and backend containers to ensure high availability, scalbility and will intergrate with azure monitor" )
    
System_Boundary(c1, "Visa Application System") {
    Container(frontend, "Responsive Frontend", "Blazor WebAssembly", "Delivers a low-latency and responsive experience for web and mobile users by running c# directly to the browser. Functioning even when there is no internet connection or under unreliable networks  ")
    Container(backend, "Backend Server Side", "C#/Dotnet using clean architecture with cqrs and Open Rest Api's", "Delivers visa application functionality through secure JSON/HTTPS APIs, adhering to the principles of Clean Architecture with CQRS. It focuses on separating concerns and structuring code into API, Application, Infrastructure, and Domain layers to manage commands and queries effectively.")
    ContainerDb(cosmos_db, "Database","Cosmos Db" , "A highly scalable, Avaliable and highly perforable database that will stores user accounts, visa applications, appointments, and branch data", $tags = "storage")
    ContainerDb(userContainer, "UserContainer", , "Data specific to users", $tags = "noSqlContainer")
    ContainerDb(branchContainer, "BranchContainer", , "Data specific to branch", $tags = "noSqlContainer")
    ContainerDb(appointmentContainer, "appointmentContainer", , "Data specific to appointments", $tags = "noSqlContainer")
    ContainerDb(applicationContainer, "ApplicationContainer", , "Data specific to application", $tags = "noSqlContainer")
}

Rel_D(anonymousUser, AKS, "Signs up/ logins to the system")
Rel_D(visaApplicant, AKS, "Requests visa suggestions, Finds & Views visa information, Create, View, Save & Resume visa applications, Schedule and view biometric appointments, Create and View Support Tickets")
Rel_D(visaOfficer, AKS, "Reviews and validates visa applications, Requests Further Information For Applications, Manages Visa Applicant Appointments Assists with providing Biometric identification, Creates And Views Support Tickets")
Rel_D(supportSpecialist, AKS, "Reviews and Replies To Support Tickets")
Rel_D(branchManager, AKS, "Manages Branch Employees(VisaProcessors & SupportSpecialists), Assign Appointments To Visa Processors")
Rel_D(admin, AKS, "Manages Branches, Manages Branch Management")

Rel_D(AKS, frontend, "AKS load balancer will distribute incoming traffic among instantances of the system")


Rel_L(backend, cosmos_db, "Gets and stores user accounts, visa applications, branch data, and meeting schedules")
Rel_R(backend, globalVisaDataHubSystem, "Get Visa information and sends reviewed applications to the system to be directed to the correct country")
Rel_R(backend, AzureMonitor, "collecting, analyzing, and responding to logging data")
Rel_D(frontend, backend, "Pass in JWT token and uses API calls and returns JSON")

Rel_D(cosmos_db, userContainer ,"holds user data and credentials")
Rel_D(cosmos_db, branchContainer ,"holds branch data")
Rel_D(cosmos_db, appointmentContainer , "holds appointment data")
Rel_D(cosmos_db, applicationContainer , "holds application data")

note left of "frontend" : The Frontend solves many of the non-functional/usability requirements that are required. Blazor applications are have high performance due to reduced latency issues and can work offline by using browser cache, it is highly scalable to handle additional users and offers support of creating accessiblity requirements. Accessibility requirements will be added in this container such as Accessible language (UP002), Colour-Blind Friendly (UP003), OpenDyslxia (UP006) And text-to-speach (UP007) which are some that have been identified.  
note left of "backend" : The Backend aims to solve the functional requirements while also addressing the non-functional requirements. The functional requirements will be distributed accross distrint layers, with business logic encapsulated with usecases and entities. Clean architecture with its separation of concerns will help enhance security, CQRS can help support scalability by being able to scale each part and with well designed Rest-Apis this should contribute to performance. Security will include RBAC, the use of JWT and Hashing this can all be seen within the level 3 diagram
note right of "cosmos_db" : You can find more information relating the decision to use cosmos_db in /docs/decisions/0006-NoSql-For-Data-Storage, i would also like that Azure cosmos Db will take a full backup of our data every 4 hours incase of coruption or loss of data
SHOW_LEGEND() 
@enduml